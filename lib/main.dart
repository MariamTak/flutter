import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // Automatically generated by FlutterFire CLI
import 'auth_gate.dart'; // The file you will create for authentication

void main() async {
  //
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,

  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      debugShowCheckedModeBanner: false, 
      home: const AuthGate(),
    );
  }
}







  // main : point d'entrée ou l'execution commence 
//MaterialApp pour android et Cupertino pour IOS
   // runapp fct pour démarrer l app, il prend en argument un widget , il dessine les interfaces
   //home: proproété de materialapp, Tasks() widget
   // build va construire l etat

  //materialapp widget, conteneur princiapl de l'app pour configuere theme, nav ..
//le Scaffold widget est utilisé pour structurer chaque page individuelle d' app, inside materialpp, pour une app on a une materialapp et plusieurs scaffold pour chaque page
//on utilise des classes pour manipuler les widgets
//MaterialApp gère les paramètres et le cadre global de l'app
 // L'interface utilisateur est encapsulée dans un widget MaterialApp, qui spécifie une page d'accueil avec un Scaffold.Le Scaffold crée la structure de la page avec un body qui contient un widget Center, lequel centre son enfant.L'enfant du widget Center est un widget Text qui affiche "Hello World".
// const , final ? final:Color.fromARGB(255, 29, 9, 9) seule fois compilation : 1 seule fois 
//widget stateful, stateless
//createstate pour une widget stateful, il retourne une classe
//on peut ajouter const a une widegt statless pour ne pas creer un instance chaque fois
//fonction asyncrone: ca fonctionne en parallere , on peut effectuer un tache qui prend de temps et naviguer dans notre application et recevoir la reponse quand s'est terminé
//await : 

// flutterfire: client pour configuer le projet pour acceder au service d'authentification (config)
//firebase pour acceder a notre espace via cloud (acces)
//streambuilder : predefinie pour reagir aux changemenent pour manipuler des streams.
//interet asynchrone : programmation non bloquant, un seul thread 